#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Apr 27 02:37:10 2020

@author: rekib
"""

from statistics import mean
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import style
import random

style.use('fivethirtyeight')

#xs = np.array([1,2,3,4,5,6], dtype=np.float64)
#ys = np.array([5,4,6,5,6,7], dtype=np.float64)


def create_dataset(hm, variance, step=2, correlation=False):
    """ Creating dataset from random numbers
    Args:
        hm: how many data points we actually want
        variance
        step: stepping value per points
        correlation: can be +ve(pos), -ve(neg), 0
    Returns: 
        xs and ys
    """
    val = 1
    ys = []    
    for i in range(hm):
        y = val + random.randrange(-variance, variance)
        ys.append(y)
        if correlation and correlation == 'pos':
            val += step
        elif correlation and correlation == 'neg':
            val -= step
    xs = [i for i in range(len(ys))]
    return np.array(xs, dtype=np.float64), np.array(ys, dtype=np.float64)



def best_fit_slope_and_intercept(xs,ys):
    """ Calculating the slope and intercept of the best fit line
    Args:
        xs (x values)
        ys (y values)
    Returns:
        m (slope)
        c (intercept)
    """
    m = ( 
            ( (mean(xs) * mean(ys)) - mean(xs*ys) ) / 
            ( (mean(xs)**2) - (mean(xs**2)) )
         )
    c = mean(ys) - ( m * mean(xs) )
    return m, c


def squared_error(ys, ys_line):
    """ Calculating squared error from points to the line
    Args:
        ys (original y values)
        ys_line (best fit line)
    Returns:
        squared error
    """
    return sum((ys_line-ys)**2)


def coefficient_of_determination(ys, ys_line):
    """ Calculate r-squared error
    Args:
        ys (original y values)
        ys_line (best fit line)
    Returns:
        r-squared error
    """
    y_mean_line = [mean(ys) for y in ys]
    squared_error_regr = squared_error(ys, ys_line)
    squared_error_y_mean = squared_error(ys, y_mean_line)
    return 1 - (squared_error_regr / squared_error_y_mean)

# creating the dataset
xs, ys = create_dataset(40, 40, 2, correlation='pos')

# getting the regression line
m, c = best_fit_slope_and_intercept(xs,ys)
regression_line = [(m*x) + c for x in xs]

# predicting the y val
predict_x = 8
predict_y = (m*predict_x)+c

r_squared = coefficient_of_determination(ys, regression_line)
print(r_squared)

# plotting
plt.scatter(xs, ys)
plt.plot(xs, regression_line)
plt.scatter(predict_x, predict_y, s=100, color='r')

plt.show()
























